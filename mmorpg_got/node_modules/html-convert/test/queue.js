var concat = require('concat-stream');
var test = require('./helpers/test');
var phantom = require('../');

// request fails - queue decreases - we start good request - it succeeds
// so 10 fail and 10 succeeds (started on each fail) should never hit limit
test('failed renders (timeout) removed from queue', function(host, t) {
  var render = phantom({pool: 1, maxErrors: 100, maxQueueLength: 9, renderTimeout: 50});
  t.plan(20);
  for (var i=0; i<10; i++)
    render(host, {expects: 'meh'})
    .on('error', function(err) {
      t.ok(err);
      render(host, {timeout: 5000}).pipe(concat(function(data) {
        t.ok(data);
      }));
    });
});

// 20 failed pdfs should cause queue reset after 10 fail, killing remaining 20
// but next 10 good pdfs should succeed
test('failed renders (timeout) with maxerrors reset the queue', function(host, t) {
  var render = phantom({pool: 1, maxErrors: 10, renderTimeout: 50});
  t.plan(30);
  var c = 0;
  for (var i=0; i<20; i++)
    render(host, {expects: 'meh'})
    .on('error', function(err) {
      t.ok(err);
      c++;
      if (c!=11) return; // max errors should empty the queue now, so we can process new good pdfs
      setTimeout(function() {
        for (var k=0; k<10; k++)
        render(host).pipe(concat(function(data) {
          t.ok(data);
        }));
      }, 100); // killing worker takes some time   
    });
});

test('destroying stream removes it from queue, queue can process next requests', function(host, t) {
  t.plan(11); 

  var render = phantom({pool: 1, maxErrors: 100, maxQueueLength:10, renderTimeout: 5000});
  for (var i=0; i<10; i++) job(i);
 
  function job(i) {
     var stream = render(host, {expects: 'meh'});
     stream.on('error', Object);
     
     setTimeout(function() {
        stream.destroy();    
        if (i==9) { // when last stream destoryed
          setTimeout(function() {
            t.equal(render.stats()[0].queue, 0);
            // putting 10 new requests
            for (var k=0; k<10; k++) render(host).pipe(concat(function(data) {
              t.ok(data);
            }));
          }, 0);
        }
     }, 10);
  }
});