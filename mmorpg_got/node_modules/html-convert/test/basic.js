var concat = require('concat-stream');
var test = require('./helpers/test');
var phantom = require('../');

test('simple render', function(host, t) {
  var render = phantom();
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    t.end();
  }));
});

test('simple render twice', function(host, t) {
  var render = phantom();
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    render(host).pipe(concat(function(data) {
      t.ok(data);
      t.ok(data.length > 0);
      t.end();
    }));
  }));
});

test('simple render parallel', function(host, t) {
  var render = phantom();
  t.plan(4);
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
  }));
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
  }));
});

test('pool render twice', function(host, t) {
  var render = phantom({pool:2});
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    render(host).pipe(concat(function(data) {
      t.ok(data);
      t.ok(data.length > 0);
      t.end();
    }));
  }));
});

test('render twice in parallel with max queue 0 and third time after respawn', function(host, t) {
  var render = phantom({pool:1, maxQueueLength: 0});
  t.plan(2);
  render(host).pipe(concat(function(data) {
    t.ok(data.length > 0);
  }));
  render(host).on('error', function(err) {
    t.ok(/Render failed due to queue limit/.test(err.message));
    render(host).pipe(concat(function(data) {
      t.ok(data);
    }));
  });
});

test('render 7 times in parallel with pool of 3 and max queue 1', function(host, t) {
  var render = phantom({pool:3, maxQueueLength: 1});
  t.plan(7);
  for(var i=0; i<7; i++) {
      render(host)
        .on('error', function(err) {
          t.ok(/Render failed due to queue limit/.test(err.message));
        })
        .pipe(concat(function(data) {
          t.ok(data.length > 0);
        }));
  }
});

test('render 7 times in parallel with pool of 3 ', function(host, t) {
  var render = phantom({pool:3});
  t.plan(7);
  for(var i=0; i<7; i++) {
      render(host)
        .pipe(concat(function(data) {
          t.ok(data.length > 0);
        }));
  }
});

test('pool render parallel', function(host, t) {
  var render = phantom({pool:2});
  t.plan(4);
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
  }));
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
  }));
});

test('non existing page', function(host, t) {
  var render = phantom();
  render('http://localhost:12398').on('error', function(err) {
    t.ok(err);
    t.end();
  });
});

test('print media', function(host, t) {
  var render = phantom({printMedia: true});
  render(host).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    t.end();
  }));
});

test('expects, with option passed to render()', function(host, t) {
  var render = phantom();
  render(host +'/?expects', {expects:'lols'}).pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    t.end();
  }));
});

test('expects failure case, with option passed to render()', function(host, t) {
  var render = phantom();
  render(host +'/?expects', {expects:'meh'}).on('error', function(err) {
    t.ok(err);
    t.end();
  });
});

test('expects, with option passed to phantom()', function(host, t) {
  var render = phantom({expects:'lols'});
  render(host +'/?expects').pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    t.end();
  }));
});

test('expects failure case, with options passed to phantom()', function(host, t) {
  var render = phantom({expects:'meh'});
  render(host +'/?expects').on('error', function(err) {
    t.ok(err);
    t.end();
  });
});

test('expects with window.renderable appearing before queue timeout should work', function (host,t) {
  var render = phantom({expects:'lols', queueTimeout:5000});
  render(host +'/?slow-expects').pipe(concat(function(data) {
    t.ok(data);
    t.ok(data.length > 0);
    t.end();
  }));
});

test('queue timeout', function(host, t) {
  var render = phantom({queueTimeout: 1000});
  render(host + '/?timeout').on('error', function(err) {
    t.ok(err);
    t.end();
  });
});

test('fetch timeout', function(host, t) {
  var render = phantom({fetchTimeout: 1000});
  render(host + '/?timeout').on('error', function(err) {
    t.ok(err);
    t.end();
  });
});

test('emits phantom logs - console', function(host, t) {
  var render = phantom();
  render(host + '/?log-console')
    .on('log', function(log) {
      t.equal(log.type, 'consoleMessage');
      t.equal(log.data.msg, 'useful log');
      t.end();
    });
});

test('emits phantom logs - js errors', function(host, t) {
  var render = phantom();
  render(host + '/?log-error')
    .on('log', function(log) {
      t.equal(log.type, 'error');
      t.equal(log.data.msg, 'ReferenceError: Can\'t find variable: a');
      t.ok(log.data.trace);
      t.end();
    });
});

test('strict render - fails render on any errors', function(host, t) {
  var render = phantom({strictRender: true});
  render(host + '/?log-error')
    .on('error', function(err) {
      t.ok(err);
      t.end();
    });
});
